scalar Long

enum Difficulty {
	EASY
	MEDIUM
	HARD
}

type Subscription {
	messageRecived(id: ID!): Message!
	newRecipeDiscover(id: ID!): Recipe!
}

type Query {
	getWatch(subscribingUser: ID!, subscribedUser: ID!): Subscribed!
	watchesRecipes(id: ID!): [Recipe!]!
}

type Mutation {
	deleteMessage(id: ID!): Int!
	deleteRecipe(id: ID!): Int!
	createMessage(addressee: String!, sender: String!, message: String!): Message!
	createRecipe(
		name: String!
		description: String!
		difficulty: Difficulty!
		image: String!
		time: Int!
		tag: [TagInput!]!
		ingredient: [IngredientInput!]!
		userID: ID!
		totalCost: Float!
	): Recipe!
	updateRecipe(
		name: String
		description: String
		difficulty: Difficulty
		image: String
		time: Int
		tag: [TagInput]
		ingredient: [IngredientInput]
		id: ID!
		totalCost: Float
	): Recipe!
	login(name: String!, password: String!): Credentials!
	createUser(name: String!, password: String!): Credentials!
	updateUser(user: UpdateUserInput!): User!
	createComment(input: CommentInput!): Comment!
	createWatchRelationship(subscribingUser: ID!, subscribedUser: ID!): Int!
	removeWatchRelationship(subscribingUser: ID!, subscribedUser: ID!): Int!
}

input RecipeFilter {
	user: UserFilter
	totalCost_gte: Float
	totalCost_lte: Float
	time_gte: Float
	time_lte: Float
	difficulty: Difficulty
	tag: TagFilter
	comment: CommentFilter
}

input UserFilter {
	name: String!
}

input TagFilter {
	name: String!
}

input CommentFilter {
	rating_gte: Float!
	rating_lte: Float!
}

type Subscribed {
	subscribed: Boolean!
}

input UpdateUserInput {
	oldName: String!
	name: String
	email: String
	password: String
	avatar: String
	description: String
}

input IngredientInput {
	name: String!
	amount: String!
}

input TagInput {
	name: String!
}

input CommentInput {
	userID: ID!
	recipeID: ID!
	rating: Int!
	description: String
}

type MessageSubscription {
	messageRecived: Message!
}

type User {
	_id: ID!
	timestamp: Long!
	name: String!
	email: String
	password: String!
	avatar: String
	description: String
	comment: [Comment] @relation(name: "COMMENTS", direction: "OUT")
	friends: [User] @relation(name: "WATCHES", direction: "OUT")
	recipe: [Recipe] @relation(name: "POSTS", direction: "OUT")
	timestamp: Long!
}

type Message {
	_id: ID!
	timestamp: Long!
	addressee: User! @relation(name: "SENT_TO", direction: "OUT")
	sender: User! @relation(name: "SENT_FROM", direction: "OUT")
	message: String!
	timestamp: Long!
}

type Ingredient {
	_id: ID!
	timestamp: Long!
	name: String!
	amount: String!
	timestamp: Long!
}

type Credentials {
	token: String!
	user: User!
}

type Tag {
	_id: ID!
	timestamp: Long!
	name: String!
	recipes: [Recipe!]! @relation(name: "HAS_TAG", direction: "IN")
	timestamp: Long!
}

type Recipe {
	_id: ID!
	timestamp: Long!
	name: String!
	description: String!
	difficulty: Difficulty!
	image: String!
	totalCost: Float!
	time: Int!
	tag: [Tag!]! @relation(name: "HAS_TAG", direction: "OUT")
	user: User! @relation(name: "POSTS", direction: "IN")
	ingredient: [Ingredient!]! @relation(name: "HAS_INGREDIENT", direction: "OUT")
	comment: [Comment] @relation(name: "HAS_COMMENT", direction: "OUT")
	timestamp: Long!
}

type Comment {
	_id: ID!
	timestamp: Long!
	rating: Int!
	description: String
	user: User! @relation(name: "COMMENTS", direction: "IN")
	recipe: Recipe! @relation(name: "HAS_COMMENT", direction: "OUT")
}
